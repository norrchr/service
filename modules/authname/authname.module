namespace eval authname {

	variable version "1.2.0"
	
	namespace export nick2auth auth2nick addauthname deauthnick cleardb addauthtodb getauth processauthname
	namespace ensemble create
	
	variable authnick
	if {![array exists authnick]} {
		array set authnick {}
	}
	
	variable nickauth
	if {![array exists nickauth]} {
		array set nickauth {}
	}
	
	variable getauth
	if {![array exists getauth]} {
		array set getauth {}
	}
	
	variable authlookup
	if {![array exists authlookup]} {
		array set authlookup {}
	}
	
	bind raw - {315} [namespace current]::onraw
	bind raw - {354} [namespace current]::onraw
	bind raw - {NICK} [namespace current]::onraw
	
	bind time - {?0 * * * *} [namespace current]::poll
	bind time - {?2 * * * *} [namespace current]::poll
	bind time - {?4 * * * *} [namespace current]::poll
	bind time - {?6 * * * *} [namespace current]::poll
	bind time - {?8 * * * *} [namespace current]::poll
	
	bind join - {*} [namespace current]::onjoin
	bind rejn - {*} [namespace current]::onjoin
	
	bind part - {*} [namespace current]::onpart
	
	bind sign - {*} [namespace current]::onsign
	bind splt - {*} [namespace current]::onsign
	
	proc addauthname {authname} {
		if {[validuser $authname]} {
			setuser $authname XTRA isauth 1; return 1
		} else {
			if {[catch {adduser $authname} err]} { return $err }
			setuser $authname XTRA isauth 1
			return 2
		}
	}
	
	proc processauthname {args} {
		variable authnick; variable nickauth
		set nickname [string tolower [lindex [split $args] 0]]
		set authname [string tolower [lindex [split $args] 1]]
		if {$nickname == "" || $authname == "" || $authname == 0} { return 0 }
		if {[info exists authnick($authname)] && [lsearch -exact $authnick($authname) $nickname] < 0} {
			lappend authnick($authname) $nickname
		} else {
			set authnick($authname) [list $nickname]
		}
		if {[info exists nickauth($nickname)] && [lsearch -exact $nickauth($nickname) $authname] < 0} {
			lappend nickauth($nickname) $authname
		} else {
			set nickauth($nickname) [list $authname]
		}
		return 0; # we don't want this to break the WHOIS stack
	}
	
	proc poll {min hour day month year} {
		#putlog "authname poll"
		foreach authname [userlist] {
			if {$authname == ""} { continue }
			if {[getuser $authname XTRA isauth] == ""} { continue }
			#putlog "nickname poll for authname: $authname"
			putserv "WHO $authname a%nuhat,137"
		}
	}
	
	proc onjoin {nickname hostname handle channel {reason {}}} {
		variable authnick; variable nickauth
		set nickname [string tolower $nickname]
		if {[string match -nocase *.users.quakenet.org $hostname]} {
			set authname [string tolower [lindex [split [lindex [split $hostname @] 1] .] 0]]
			putlog "authname onjoin: $nickname @ $channel is authed as $authname"
			if {[info exists authnick($authname)] && [lsearch -exact $authnick($authname) $nickname] < 0} {
				lappend authnick($authname) $nickname
			} else {
				set authnick($authname) [list $nickname]
			}
			if {[info exists nickauth($nickname)] && [lsearch -exact $nickauth($nickname) $authname] < 0} {
				lappend nickauth($nickname) $authname
			} else {
				set nickauth($nickname) [list $authname]
			}
		}
	}
	
	proc onpart {nickname hostname handle channel {reason {}}} {
		utimer 1 [list [namespace current]::deauthnick $nickname]
	}
	
	proc onsign {nickname hostname handle channel {reason {}}} {
		variable authnick; variable nickauth
		set nickname [string tolower $nickname]
		if {[info exists nickauth($nickname)]} {
			set authname $nickauth($nickname)
			unset nickauth($nickname)
			if {[info exists authnick($authname)]} {
				if {[llength $authnick($authname)] == 1} {
					unset authnick($authname)
				} elseif {[set i [lsearch -exact $authnick($authname) $nickname]] >= 0} {
					set authnick($authname) [lreplace $authnick($authname) $i $i]
				}
			}
		}
	}
	
	proc cleardb {} {
		variable authnick; variable nickauth; variable getauth; variable authlookup
		array unset authnick; array set authnick {}
		array unset nickauth; array set nickauth {}
		array unset getauth; array set getauth {}
		array unset authlookup; array set authlookup {}
	}
	
	proc deauthnick {nickname} {
		variable authnick; variable nickauth
		if {[onchan $nickname]} { return }
		set nickname [string tolower $nickname]
		if {[info exists nickauth($nickname)]} {
			set authname $nickauth($nickname)
			unset nickauth($nickname)
			putlog "deauthnick: unset nickauth($nickname)"
			if {[info exists authnick($authname)]} {
				if {[llength $authnick($authname)] == 1} {
					unset authnick($authname)
					putlog "deauthnick: unset authnick($authname)"
				} elseif {[set i [lsearch -exact $authnick($authname) $nickname]] >= 0} {
					set authnick($authname) [lreplace $authnick($authname) $i $i]
					putlog "deauthnick: removed $nickname from authnick($authname): $authnick($authname)"
				}
			}
		}
	}
	
	proc onraw {from raw arg} {
		#putlog "authname onraw ${raw}: $arg"
		if {[string equal -nocase "NICK" $raw]} {
			variable authnick; variable nickauth
			# on NICK change
			set nickname [string tolower [lindex [split $from !] 0]]
			set newnick [string tolower [string trimleft $arg :]]
			if {[info exists nickauth($nickname)]} {
				set authname $nickauth($nickname)
				set nickauth($newnick) $authname
				unset nickauth($nickname)
				if {[info exists authnick($authname)]} {
					if {[llength $authnick($authname)] == 1} {
						set authnick($authname) [list $newnick]
					} elseif {[set i [lsearch -exact $authnick($authname) $nickname]] >= 0} {
						set authnick($authname) [lreplace $authnick($authname) $i $i $newnick]
					}
				}
			}
			return 0
		} elseif {$raw == "315"} {
			# end of WHO
			set authname [lindex [split $arg] 1]
			if {[validuser $authname]} {
				# end of WHO for authname list
				#putlog "authname onraw ${raw}: end of nicklist for $authname"
				return 0
			}
			return 0
		} elseif {$raw == "354"} {
			# WHO extended reply
			set token [lindex [split $arg] 1]
			if {$token == "137" && [set authname [string tolower [lindex [split $arg] 5]]] != "0" && [validuser $authname]} {
				# 137 r0t3n im.awesome.so.dont.pm r0t3n^ away
				set username [lindex [split $arg] 2]
				set hostname [lindex [split $arg] 3]
				set nickname [string tolower [lindex [split $arg] 4]]
				if {[string match -nocase "*.users.quakenet.org" $hostname]} {
					#addhost $authname *!*@$hostname
					#putlog "Added *!*@$hostname to $authname"
				} else {
					#addhost $authname *!*@${authname}.users.quakenet.org
					#addhost $authname *!*[string trimleft $username ~]@$hostname
					#putlog "Added *!*@${authname}.users.quakenet.org, *!*[string trimleft $username ~]@$hostname to $authname"
				}
				addauthtodb $nickname $authname
				#putlog "authname onraw ${raw}: $nickname ($username@$hostname) authed as $authname"
				return 0
			} elseif {$token == "138"} {
				# 138 ident host nick auth
				variable getauth
				set username [lindex [split $arg] 2]
				set hostname [lindex [split $arg] 3]
				set nickname [string tolower [lindex [split $arg] 4]]
				set authname [string tolower [lindex [split $arg] 5]]
				if {![info exists getauth($nickname)]} { return }
				unset getauth($nickname)
				if {$authname == "" || $authname == "0"} {
					putserv "NOTICE $nickname :ERROR: You are not authed to network services."; return
				} else {
					addauthtodb $nickname $authname
					if {[validuser $authname] && [getuser $authname XTRA isauth] == 1} {
						set hosts [list]
						if {[string match -nocase "*.users.quakenet.org" $hostname]} {
							lappend hosts *!*@$hostname
						} else {
							lappend hosts *!*@${authname}.users.quakenet.org
							lappend hosts *!*[string trimleft $username ~]@$hostname
						}
						#foreach host $hosts {
						#	if {$host == ""} { continue }
						#		addhost $authname $host
						#}
						putserv "NOTICE $nickname :Success: You are authed as '$authname', the following hostmask(s) have been added to your account: [join $hosts ", "]."
					} else {
						putserv "NOTICE $nickname :Success: You are authed to the network as '$authname' but do not hold an auth-account with me."
					}
				}
				return 0
			} elseif {$token == "139"} {
				# raw reply for MODE/KICK auth lookups
				#putlog "onraw authlookup: $from - $raw - $arg"
				variable authlookup
				set username [lindex [split $arg] 2]
				set hostname [lindex [split $arg] 3]
				set nickname [string tolower [lindex [split $arg] 4]]
				set authname [string tolower [lindex [split $arg] 5]]
				if {$authname != "" && $authname != "0"} {
					addauthtodb $nickname $authname
				}
				#putlog "onraw authlookup: $nickname -> $authname"
				# nickname , #channel , id
				# reop method arg
				if {[llength [array names authlookup ${nickname},*]] <= 0} { putlog "onraw authlookup: no logged actions for $nickname"; return }
				foreach {nickchanid value} [array get authlookup ${nickname},*] {
					if {$nickchanid == "" || $value == ""} { continue }
					unset authlookup($nickchanid)
					set nick [lindex [split $nickchanid ,] 0]
					set chan [lindex [split $nickchanid ,] 1]
					if {![validchan $chan]} { continue }
					set reop [lindex [split $value] 0]
					set method [lindex [split $value] 1]
					putlog "onraw authlookup: function: [namespace parent]::onraw_$method -> from: ${nickname}!${username}@${hostname} -> raw: $method -> arg: [join [lrange $value 1 end]] -> reop: [expr {1+$reop}]"
					if {[string equal -nocase "KICK" $method]} {
						putlog "onraw_kick: Got authlookup response for: $nickchanid"
						[namespace parent]::onraw_kick "${nickname}!${username}@${hostname}" $method "[join [lrange $value 2 end]]" [expr {1+$reop}]
					} elseif {[string equal -nocase "MODE" $method]} {
						putlog "onraw_mode: Got authlookup response for: $nickchanid"
						[namespace parent]::onraw_mode "${nickname}!${username}@${hostname}" $method "[join [lrange $value 2 end]]" [expr {1+$reop}]
					} elseif {[string equal -nocase "TOPIC" $method]} {
						putlog "onraw_topic: Got authlookup response for: $nickchanid"
						namespace parent]::onraw_topic "${nickname}!${username}@${hostname}" $method "[join [lrange $value 2 end]]" [expr {1+$reop}]
					}
				}
				return 0
			}
			return 0
		}
		return 0
	}
	
	proc addauthtodb {nickname authname} {
		variable authnick; variable nickauth
		if {[info exists authnick($authname)] && [lsearch -exact $authnick($authname) $nickname] < 0} {
			lappend authnick($authname) $nickname
		} else {
			set authnick($authname) [list $nickname]
		}
		if {[info exists nickauth($nickname)] && [lsearch -exact $nickauth($nickname) $authname] < 0} {
			lappend nickauth($nickname) $authname
		} else {
			set nickauth($nickname) [list $authname]
		}
	}
	
	proc nick2auth {nickname} {
		variable nickauth
		set nickname [string tolower $nickname]
		return [expr {[info exists nickauth($nickname)] ? $nickauth($nickname) : ""}]
	}
	
	proc auth2nick {authname} {
		variable authnick
		set authname [string tolower $authname]
		return [expr {[info exists authnick($authname)] ? $authnick($authname) : ""}]
	}
	
	proc getauth {nickname} {
		if {[set auth [nick2auth $nickname]] != ""} { return $auth }
		if {![onchan $nickname]} { return 0 }
		variable getauth
		set getauth([string tolower $nickname]) "[clock seconds]"
		utimer 5 [list [namespace current]::getauthtimeout $nickname]
		putserv "NOTICE $nickname :Attempting to grab your authname... please wait"
		putserv "WHO $nickname n%nuhat,138"
		return 1
	}
	
	putlog "[namespace current] version $version loaded."
	
}